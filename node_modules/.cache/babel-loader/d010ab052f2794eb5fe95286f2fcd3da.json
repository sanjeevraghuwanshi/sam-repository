{"ast":null,"code":"var _jsxFileName = \"/home/ram/Downloads/React-Projects/react-redux-crud-app/src/components/auth/Login.js\";\nimport React from 'react';\nimport { Field, reduxForm, reset } from 'redux-form';\nimport Joi from \"joi-browser\";\nimport { NavLink } from 'react-router-dom';\nimport Form from '../common/form';\nimport { connect } from 'react-redux';\nimport { doLogin } from \"../../actions/userAction\"; // import Button from '@material-ui/core/Button';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"../Button\";\n\nclass Login extends Form {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const user = this.state.user;\n\n      if (user) {\n        this.props.onFetchLoginData(user);\n        this.setState({\n          user: {\n            email: \"\",\n            password: \"\"\n          }\n        });\n      }\n    };\n\n    this.handleChange = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      user: {\n        email: \"\",\n        password: \"\"\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      value: this.state.user.email,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"password\",\n      value: this.state.user.password,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Search\"));\n  }\n\n}\n\nconst validate = fromValue => {\n  const schema = {\n    email: Joi.string().required().label(\"Email\"),\n    password: Joi.string().required().label(\"Password\")\n  };\n  const options = {\n    abortEarly: false\n  };\n\n  const _Joi$validate = Joi.validate(fromValue, schema, options),\n        error = _Joi$validate.error;\n\n  if (!error) return null;\n  const errors = {};\n\n  for (let item of error.details) {\n    errors[item.path[0]] = item.message;\n  }\n\n  return errors;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onFetchLoginData: user => dispatch(doLogin(user))\n});\n\nconst LoginMap = connect(null, mapDispatchToProps)(Login);\nexport default reduxForm({\n  form: 'loginForm',\n  validate: validate\n})(LoginMap);","map":{"version":3,"sources":["/home/ram/Downloads/React-Projects/react-redux-crud-app/src/components/auth/Login.js"],"names":["React","Field","reduxForm","reset","Joi","NavLink","Form","connect","doLogin","Grid","Container","Typography","Button","Login","constructor","props","handleSubmit","e","preventDefault","user","state","onFetchLoginData","setState","email","password","handleChange","target","name","value","render","validate","fromValue","schema","string","required","label","options","abortEarly","error","errors","item","details","path","message","mapDispatchToProps","dispatch","LoginMap","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm, reset } from 'redux-form';\nimport Joi from \"joi-browser\";\n\nimport { NavLink } from 'react-router-dom';\n\nimport Form from '../common/form';\nimport { connect } from 'react-redux';\nimport { doLogin } from \"../../actions/userAction\";\n\n// import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"../Button\";\n\nclass Login extends Form {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                email: \"\",\n                password: \"\"\n            }\n        }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        const { user } = this.state;\n        if (user) {\n            this.props.onFetchLoginData(user);\n            this.setState({\n                user: {\n                    email: \"\",\n                    password: \"\"\n                }\n            });\n        }\n\n    }\n    handleChange = e => {\n        const { name, value } = e.target\n        this.setState({ [name]: value })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input\n                    type=\"text\"\n                    name=\"email\"\n                    value={this.state.user.email}\n                    onChange={this.handleChange}\n                />\n                <input\n                    type=\"text\"\n                    name=\"password\"\n                    value={this.state.user.password}\n                    onChange={this.handleChange}\n                />\n\n                <Button type=\"submit\">Search</Button>\n            </form>\n        )\n    }\n}\n\nconst validate = (fromValue) => {\n    const schema = {\n        email: Joi.string()\n            .required()\n            .label(\"Email\"),\n        password: Joi.string()\n            .required()\n            .label(\"Password\")\n    };\n\n    const options = { abortEarly: false };\n    const { error } = Joi.validate(fromValue, schema, options);\n    if (!error) return null;\n\n    const errors = {};\n    for (let item of error.details) {\n        errors[item.path[0]] = item.message;\n    }\n    return errors;\n}\nconst mapDispatchToProps = dispatch => ({\n    onFetchLoginData: user => dispatch(doLogin(user))\n})\n\n\nconst LoginMap = connect(null, mapDispatchToProps)(Login)\n\n\nexport default reduxForm({\n    form: 'loginForm',\n    validate: validate\n})(LoginMap);"]},"metadata":{},"sourceType":"module"}